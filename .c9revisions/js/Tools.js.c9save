{"ts":1358100161545,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1358100164942,"patch":[[{"diffs":[[1,"//----------------------------------------------------------------------------\r\n// Tools functions\r\n//----------------------------------------------------------------------------\r\n/**\r\n * @author RX\r\n */\r\nfunction cross2D (a, b) {\r\n    return (a.x * b.y) - (a.y * b.x)\r\n}\r\nfunction dot2D (a, b) {\r\n\treturn (a.x * b.x) + (a.y * b.y)\r\n}\r\nfunction dot3Vectors (a, b, c) {\r\n\treturn ((b.x - a.x) * (c.x - a.x)) + ((b.y - a.y) * (c.y - a.y)) + ((b.z - a.z) * (c.z - a.z))\r\n}\r\nfunction distToSegmentOnPlane (A, B, P, normal) {\r\n\tvar vAB = new THREE.Vector3 (B.x - A.x, B.y - A.y, B.z - A.z);\r\n\tvar vAP = new THREE.Vector3 (P.x - A.x, P.y - A.y, P.z - A.z);\r\n\tvAB.crossSelf (vAP);\r\n\treturn vAB.dot (normal)\r\n}\r\nfunction isPointIntoQuad (vA, vB, vC, vD, vN, vP) {\r\n\tvar fDistAB = distToSegmentOnPlane (vA, vB, vP, vN);\r\n\tvar fDistBC = distToSegmentOnPlane (vB, vC, vP, vN);\r\n\tvar fDistCD = distToSegmentOnPlane (vC, vD, vP, vN);\r\n\tvar fDistDA = distToSegmentOnPlane (vD, vA, vP, vN);\r\n\treturn ((fDistAB >= 0 && fDistBC >= 0 && fDistCD >= 0 && fDistDA >= 0) || (fDistAB <= 0 && fDistBC <= 0 && fDistCD <= 0 && fDistDA <= 0));\r\n}\r\nfunction applyMatrix (v, matrix) {\r\n\tvar a = matrix.elements, c = v.x, d = v.y, e = v.z;\r\n\tv.x = a[0] * c + a[4] * d + a[8]  * e + a[12];\r\n\tv.y = a[1] * c + a[5] * d + a[9]  * e + a[13];\r\n\tv.z = a[2] * c + a[6] * d + a[10] * e + a[14];\r\n\treturn a\r\n}\r\nfunction applyRotationMatrix (v, matrix) {\r\n\tvar a = matrix.elements, c = v.x, d = v.y, e = v.z;\r\n\tv.x = a[0] * c + a[4] * d + a[8]  * e;\r\n\tv.y = a[1] * c + a[5] * d + a[9]  * e;\r\n\tv.z = a[2] * c + a[6] * d + a[10] * e;\r\n\treturn a\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":1604}]],"length":1604,"saved":false}
